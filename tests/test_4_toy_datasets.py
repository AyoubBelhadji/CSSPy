#sys.path.append('../')
import sys
sys.path.insert(0, '..')
import numpy as np
import pandas as pd
from itertools import combinations
from scipy.stats import binom
import scipy.special
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from IPython.display import display, HTML

#sys.path.append("../")
from FrameBuilder.eigenstepsbuilder import *
from decimal import *
from copy import deepcopy
import matplotlib.lines as mlines
import matplotlib.transforms as mtransforms

from env.toy_datasets_experiments_tools import *
from env.toy_datasets_numerical_analysis import *


# This is a test for basic functions of this package:
## * Calculating the k-leverage scores 
## * Calculating the p_eff(theta) function
## * Plots of k-leverage scores and cumulative k-leverage scores

# Import two datasets

## The dimensions of the design matrix X
N = 21       # The number of observations in the dataset
real_dim = 20 # The dimension of the dataset
## The low rank paramters
k = 3         # The rank of the low rank approximation 
## The covariance matrix parameters
r = 6         # Just a parameter to control the number of non trivial singular values in the covariance matrix
mean = np.zeros((real_dim))    # The mean vector useful to generate U (X = UDV^T)
cov_test = 0.100*np.ones((real_dim-r))  # The "trivial" singular values in the covariance matrix (there are real_dim-r)
#cov_test[0:4] = [0.1,0.05,0.04,0.03]  # The "trivial" singular values in the covariance matrix (there are real_dim-r)
cov_test_2 = 0.100*np.ones((real_dim-r))  # The "trivial" singular values in the covariance matrix (there are real_dim-r)


## The paramters of the matrix V
versions_number = 3 # The number of orthogonal matrices (and therefor datasets) (-1) generated by the algorithm above
lv_scores_vector = k/real_dim*np.ones(real_dim)  # The vector of leverage scores (the last one)




d = real_dim
# Singular values of the matrices for the case k =2
cov_1_k_2 = np.diag(np.concatenate(([100,100,0.1,0.1,0.1,0.1],cov_test)))

cov_2_k_2 = np.diag(np.concatenate(([100,10,0.1,0.1,0.1,0.1],cov_test)))
cov_3_k_2 = np.diag(np.concatenate(([0.1,0.1,0.1,0.1,0.1,0.1],cov_test)))
# Singular values of the matrices for the case k =3
cov_1_k_3 = np.diag(np.concatenate(([100,100,100,0.1,0.1,0.1],cov_test)))
trace_cov_1_k_3 = np.sum(cov_1_k_3)

cov_2_k_3 = np.diag(np.concatenate(([100,10,1,0.1,0.1,0.1],cov_test)))
trace_cov_2_k_3 = np.sum(cov_2_k_3)
cov_2_k_3 = trace_cov_1_k_3/trace_cov_2_k_3*cov_2_k_3


#cov_1_k_3_ = np.diag(np.concatenate(([100,100,100,0.1,0.05,0.05],0.5*cov_test)))
#cov_1_k_3___ = np.diag(np.concatenate(([100,100,100,0.1,0.05,0.02],0.05*cov_test)))
#cov_1_k_3__ = np.diag(np.concatenate(([100,100,100,0.1,0.05,0.02],0.01*cov_test)))

cov_3_k_3 = np.diag(np.concatenate(([0.1,0.1,0.1,0.1,0.1,0.1],cov_test)))
trace_cov_3_k_3 = np.sum(cov_3_k_3)
cov_3_k_3 = trace_cov_1_k_3/trace_cov_3_k_3*cov_3_k_3

cov_4_k_3 = np.diag(np.concatenate(([1.0,0.4,0.2,0.1,0.1,0.1],cov_test)))
trace_cov_4_k_3 = np.sum(cov_4_k_3)
cov_4_k_3 = trace_cov_1_k_3/trace_cov_4_k_3*cov_4_k_3

cov_5_k_3 = np.diag(np.concatenate(([0.4,0.3,0.2,0.1,0.1,0.1],cov_test)))
trace_cov_5_k_3 = np.sum(cov_5_k_3)
cov_5_k_3 = trace_cov_1_k_3/trace_cov_5_k_3*cov_5_k_3

#trace_cov_3_k_3 = np.sum(cov_3_k_3)
# Singular values of the matrices for the case k =4
cov_1_k_4 = np.diag(np.concatenate(([100,100,100,100,0.1,0.1],cov_test)))
cov_2_k_4 = np.diag(np.concatenate(([1000,100,10,1,0.1,0.1],cov_test)))
cov_3_k_4 = np.diag(np.concatenate(([0.1,0.1,0.1,0.1,0.1,0.1],cov_test)))

# Singular values of the matrices for the case k =5
cov_1_k_5 = np.diag(np.concatenate(([100,100,100,100,100,0.1],cov_test)))
trace_cov_1_k_5 = np.sum(cov_1_k_5)
cov_2_k_5 = np.diag(np.concatenate(([10000,1000,100,10,1,0.1],cov_test)))
trace_cov_2_k_5 = np.sum(cov_2_k_5)
cov_2_k_5 = trace_cov_1_k_5/trace_cov_2_k_5*cov_2_k_5
cov_3_k_5 = np.diag(np.concatenate(([0.1,0.1,0.1,0.1,0.1,0.1],cov_test)))
trace_cov_3_k_5 = np.sum(cov_3_k_5)
cov_3_k_3 = trace_cov_1_k_5/trace_cov_3_k_5*cov_3_k_5

cov_4_k_5 = np.diag(np.concatenate(([3.0,1.8,0.8,0.4,0.2,0.1],cov_test)))
trace_cov_4_k_5 = np.sum(cov_4_k_5)
cov_4_k_5 = trace_cov_1_k_5/trace_cov_4_k_5*cov_4_k_5


cov_5_k_5 = np.diag(np.concatenate(([0.6,0.5,0.4,0.3,0.2,0.1],cov_test)))
trace_cov_5_k_5 = np.sum(cov_5_k_5)
cov_5_k_5 = trace_cov_1_k_5/trace_cov_5_k_5*cov_5_k_5
#cov_1_k_5[d-13:d-10]=0.01
#cov_1_k_5[d-10:d]=0
# Singular values of the matrices for the case k =6
cov_1_k_6 = np.diag(np.concatenate(([100,100,100,100,100,100],cov_test_2)))
cov_2_k_6 = np.diag(np.concatenate(([100000,10000,1000,100,10,1],cov_test)))
cov_3_k_6 = np.diag(np.concatenate(([0.1,0.1,0.1,0.1,0.1,0.1],cov_test)))
#
static_list_1 = list(range(4,21))
static_list_2 = list(range(10,21))
static_list_5 = list(range(6,21))


####
N = 20
#cov_2_k_3[d-10:d]=0

plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_1_k_3,static_list_1,0,"projection_spectrum_flat_spectrum_after")

plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_2_k_3,static_list_1,0,"smooth_spectrum_flat_spectrum_after")

#plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_4_k_3,static_list_1,0,"very_smooth_spectrum_flat_spectrum_after")

plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_3_k_3,static_list_1,0,"identity_spectrum_flat_spectrum_after")


#plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_5_k_3,static_list_1,0,"very_very_smooth_spectrum_flat_spectrum_after")


plot_results_of_multi_experiments(N,real_dim,r,100,5,mean,cov_1_k_5,static_list_5,0,"projection_spectrum_flat_spectrum_after")

plot_results_of_multi_experiments(N,real_dim,r,100,5,mean,cov_2_k_5,static_list_5,0,"smooth_spectrum_flat_spectrum_after")

plot_results_of_multi_experiments(N,real_dim,r,100,5,mean,cov_3_k_5,static_list_5,0,"identity_spectrum_flat_spectrum_after")

#plot_results_of_multi_experiments(N,real_dim,r,100,5,mean,cov_4_k_5,static_list_5,0,"very_smooth_spectrum_flat_spectrum_after")

#plot_results_of_multi_experiments(N,real_dim,r,100,5,mean,cov_5_k_5,static_list_5,0,"very_very_smooth_spectrum_flat_spectrum_after")


#
#N = 15
##cov_2_k_3[d-10:d]=0
#
#plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_1_k_3,static_list_1,0,"flat_spectrum_after")
#
#N= 10
#plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_1_k_3,static_list_1,0,"flat_spectrum_after")
#
#N= 8
#plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_1_k_3,static_list_1,0,"flat_spectrum_after")
#
#
#N= 20
#plot_results_of_multi_experiments(N,real_dim,r,100,3,mean,cov_1_k_3,static_list_1,0,"flat_spectrum_after")
#

